name: Build

on:
  push:
    paths:
      - ".github/workflows/build.yml"
      - "app/**"
  pull_request:
    paths:
      - ".github/workflows/build.yml"
      - "app/**"
  schedule:
    - cron: "22 4 * * *"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'schedule' }}
  cancel-in-progress: true

permissions: {}

jobs:
  get-changed-files:
    if: ${{ github.event_name != 'schedule' }}
    runs-on: ubuntu-latest
    outputs:
      changed-files: ${{ steps.changed-files.outputs.all_changed_files }}
      board-changes: ${{ steps.board-changes.outputs.result }}
      core-changes: ${{ steps.core-changes.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: tj-actions/changed-files@v44
        id: changed-files
        with:
          json: true
          escape_json: false
      - uses: actions/github-script@v7
        id: board-changes
        with:
          script: |
            const changedFiles = JSON.parse(`${{ steps.changed-files.outputs.all_changed_files }}`);
            const boardChanges = changedFiles.filter(f => f.startsWith('app/boards'));
            return boardChanges.length ? 'true' : 'false';
          result-encoding: string
      - uses: actions/github-script@v7
        id: core-changes
        with:
          script: |
            const changedFiles = JSON.parse(`${{ steps.changed-files.outputs.all_changed_files }}`);
            const boardChanges = changedFiles.filter(f => f.startsWith('app/boards'));
            const appChanges = changedFiles.filter(f => f.startsWith('app'));
            const ymlChanges = changedFiles.includes('.github/workflows/build.yml');
            return boardChanges.length < appChanges.length || ymlChanges ? 'true' : 'false';
          result-encoding: string

  get-grouped-hardware:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "14.x"
      - name: Install js-yaml
        run: npm install js-yaml
      - name: Aggregate Metadata
        uses: actions/github-script@v7
        id: aggregate-metadata
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');

            const globber = await glob.create("app/boards/**/*.zmk.yml");
            const files = await globber.glob();

            const aggregated = files.flatMap((f) =>
              yaml.loadAll(fs.readFileSync(f, "utf8"))
            );

            return JSON.stringify(aggregated).replace(/\\/g,"\\\\").replace(/`/g,"\\`");
          result-encoding: string

      - name: Organize Metadata
        uses: actions/github-script@v7
        id: organize-metadata
        with:
          script: |
            const hardware = JSON.parse(`${{ steps.aggregate-metadata.outputs.result }}`);

            const grouped = hardware.reduce((agg, hm) => {
              switch (hm.type) {
                case "board":
                  if (hm.features && hm.features.includes("keys")) {
                    agg.onboard.push(hm);
                  } else if (hm.exposes) {
                    hm.exposes.forEach((element) => {
                      let ic = agg.interconnects[element] || {
                        boards: [],
                        shields: [],
                      };
                      ic.boards.push(hm);
                      agg.interconnects[element] = ic;
                    });
                  } else {
                    console.error("Board without keys or interconnect");
                  }
                  break;
                case "shield":
                  if (hm.features && hm.features.includes("keys")) {
                    hm.requires.forEach((id) => {
                      let ic = agg.interconnects[id] || { boards: [], shields: [] };
                      ic.shields.push(hm);
                      agg.interconnects[id] = ic;
                    });
                  }
                  break;
                case "interconnect":
                  let ic = agg.interconnects[hm.id] || { boards: [], shields: [] };
                  ic.interconnect = hm;
                  agg.interconnects[hm.id] = ic;
                  break;
              }
              return agg;
            },
            { onboard: [], interconnects: {} });

            return JSON.stringify(grouped).replace(/\\/g,"\\\\").replace(/`/g,"\\`");
          result-encoding: string

  core-coverage:
    if: ${{ needs.get-changed-files.outputs.core-changes == 'true' }}
    runs-on: ubuntu-latest
    needs: get-changed-files
    outputs:
      core-include: ${{ steps.core-list.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "14.x"
      - name: Install js-yaml
        run: npm install js-yaml
      - uses: actions/github-script@v7
        id: core-list
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');

            const coreCoverage = yaml.load(fs.readFileSync('app/core-coverage.yml', 'utf8'));

            let include = coreCoverage.board.flatMap(board =>
              coreCoverage.shield.map(shield => ({ board, shield }))
            );

            return [...include, ...coreCoverage.include];
          
  board-changes:
    if: ${{ needs.get-changed-files.outputs.board-changes == 'true' }}
    runs-on: ubuntu-latest
    needs: get-changed-files
    outputs:
      boards-include: ${{ steps.boards-list.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "14.x"
      - name: Install js-yaml
        run: npm install js-yaml
      - uses: actions/github-script@v7
        id: boards-list
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');

            const changedFiles = JSON.parse(`${{ needs.get-changed-files.outputs.changed-files }}`);
            const metadata = JSON.parse(`${{ needs.get-grouped-hardware.outputs.organized-metadata }}`);
            const boardChanges = new Set(changedFiles.filter(f => f.startsWith('app/boards')).map(f => f.split('/').slice(0, 4).join('/')));

            return (await Promise.all([...boardChanges].flatMap(async bc => {
              const globber = await glob.create(bc + "/*.zmk.yml");
              const files = await globber.glob();

              const aggregated = files.flatMap((f) =>
                yaml.loadAll(fs.readFileSync(f, "utf8"))
              );

              const boardAndShield = (b, s) => {
                if (s.siblings) {
                  return s.siblings.map(shield => ({
                    board: b.id,
                    shield,
                  }));
                } else {
                  return {
                    board: b.id,
                    shield: s.id
                  };
                }
              }

              return aggregated.flatMap(hm => {
                switch (hm.type) {
                  case "board":
                    if (hm.features && hm.features.includes("keys")) {
                      if (hm.siblings) {
                        return hm.siblings.map(board => ({
                          board,
                        }));
                      } else {
                        return {
                          board: hm.id
                        };
                      }
                    } else if (hm.exposes) {
                      return hm.exposes.flatMap(i =>
                        metadata.interconnects[i].shields.flatMap(s => boardAndShield(hm, s))
                      );
                    } else {
                      console.error("Board without keys or interconnect");
                    }
                    break;
                  case "shield":
                    if (hm.features && hm.features.includes("keys")) {
                      return hm.requires.flatMap(i =>
                        metadata.interconnects[i].boards.flatMap(b => boardAndShield(b, hm))
                      );
                    } else {
                      console.warn("Unhandled shield without keys");
                      return [];
                    }
                    break;
                  case "interconnect":
                    return [];
                }
              });
            }))).flat();
          
  compile-matrix:
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    needs: [core-coverage, board-changes]
    outputs:
      include-list: ${{ steps.compile-list.outputs.result }}
    steps:
      - name: Join build lists
        uses: actions/github-script@v7
        id: compile-list
        with:
          script: |
            const coreCoverage = `${{ needs.core-coverage.outputs.core-include }}` || "
