jobs:
  get-changed-files:
    if: ${{ github.event_name != 'schedule' }}
    runs-on: ubuntu-latest
    outputs:
      changed-files: ${{ steps.changed-files.outputs.all_changed_files }}
      board-changes: ${{ steps.board-changes.outputs.result }}
      core-changes: ${{ steps.core-changes.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - uses: tj-actions/changed-files@v44
        id: changed-files
        with:
          json: true
          escape_json: false
      - uses: actions/github-script@v7
        id: board-changes
        with:
          script: |
            const changedFiles = JSON.parse(`${{ steps.changed-files.outputs.all_changed_files }}`);
            const boardChanges = changedFiles.filter(f => f.startsWith('app/boards'));
            return boardChanges.length ? 'true' : 'false';
          result-encoding: string
      - uses: actions/github-script@v7
        id: core-changes
        with:
          script: |
            const changedFiles = JSON.parse(`${{ steps.changed-files.outputs.all_changed_files }}`);
            const boardChanges = changedFiles.filter(f => f.startsWith('app/boards'));
            const appChanges = changedFiles.filter(f => f.startsWith('app'));
            const ymlChanges = changedFiles.includes('.github/workflows/build.yml');
            return boardChanges.length < appChanges.length || ymlChanges ? 'true' : 'false';
          result-encoding: string

  core-coverage:
    if: ${{ needs.get-changed-files.outputs.core-changes == 'true' }}
    runs-on: ubuntu-latest
    needs: get-changed-files
    outputs:
      core-include: ${{ steps.core-list.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "14.x"
      - name: Install js-yaml
        run: npm install js-yaml
      - uses: actions/github-script@v7
        id: core-list
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');

            const coreCoverage = yaml.load(fs.readFileSync('app/core-coverage.yml', 'utf8'));

            let include = coreCoverage.board.flatMap(board =>
              coreCoverage.shield.map(shield => ({ board, shield }))
            );

            return JSON.stringify([...include, ...coreCoverage.include]);
          
  board-changes:
    if: ${{ needs.get-changed-files.outputs.board-changes == 'true' }}
    runs-on: ubuntu-latest
    needs: get-changed-files
    outputs:
      boards-include: ${{ steps.boards-list.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "14.x"
      - name: Install js-yaml
        run: npm install js-yaml
      - uses: actions/github-script@v7
        id: boards-list
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');

            const changedFiles = JSON.parse(`${{ needs.get-changed-files.outputs.changed-files }}`);
            const metadata = JSON.parse(`${{ needs.get-grouped-hardware.outputs.organized-metadata }}`);
            const boardChanges = new Set(changedFiles.filter(f => f.startsWith('app/boards')).map(f => f.split('/').slice(0, 4).join('/')));

            return (await Promise.all([...boardChanges].flatMap(async bc => {
              const globber = await glob.create(bc + "/*.zmk.yml");
              const files = await globber.glob();

              const aggregated = files.flatMap((f) =>
                yaml.loadAll(fs.readFileSync(f, "utf8"))
              );

              const boardAndShield = (b, s) => {
                if (s.siblings) {
                  return s.siblings.map(shield => ({
                    board: b.id,
                    shield,
                  }));
                } else {
                  return {
                    board: b.id,
                    shield: s.id
                  };
                }
              }

              return aggregated.flatMap(hm => {
                switch (hm.type) {
                  case "board":
                    if (hm.features && hm.features.includes("keys")) {
                      if (hm.siblings) {
                        return hm.siblings.map(board => ({
                          board,
                        }));
                      } else {
                        return {
                          board: hm.id
                        };
                      }
                    } else if (hm.exposes) {
                      return hm.exposes.flatMap(i =>
                        metadata.interconnects[i].shields.flatMap(s => boardAndShield(hm, s))
                      );
                    } else {
                      console.error("Board without keys or interconnect");
                    }
                    break;
                  case "shield":
                    if (hm.features && hm.features.includes("keys")) {
                      return hm.requires.flatMap(i =>
                        metadata.interconnects[i].boards.flatMap(b => boardAndShield(b, hm))
                      );
                    } else {
                      console.warn("Unhandled shield without keys");
                      return [];
                    }
                    break;
                  case "interconnect":
                    return [];
                }
              });
            }))).flat();
          
  compile-matrix:
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    needs: [core-coverage, board-changes]
    outputs:
      include-list: ${{ steps.compile-list.outputs.result }}
    steps:
      - name: Join build lists
        uses: actions/github-script@v7
        id: compile-list
        with:
          script: |
            const coreCoverage = `${{ needs.core-coverage.outputs.core-include }}` || "[]";
            const boardChanges = `${{ needs.board-changes.outputs.boards-include }}` || "[]";

            const combined = [
              ...JSON.parse(coreCoverage),
              ...JSON.parse(boardChanges)
            ];
            const combinedUnique = [...new Map(combined.map(el => [JSON.stringify(el), el])).values()];

            const perBoard = {};

            for (const configuration of combinedUnique) {
              if (!perBoard[configuration.board])
                perBoard[configuration.board] = [];

              perBoard[configuration.board].push({
                shield: configuration.shield,
                'cmake-args': configuration['cmake-args'],
                snippet: configuration.snippet,
                nickname: configuration.nickname
              })
            }

            return JSON.stringify(Object.entries(perBoard).map(([board, shieldArgs]) => ({
              board,
              shieldArgs: JSON.stringify(shieldArgs),
            })));
          
  build:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    container:
      image: docker.io/zmkfirmware/zmk-build-arm:3.5
    needs: compile-matrix
    strategy:
      matrix:
        include: ${{ fromJSON(needs.compile-matrix.outputs.include-list) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Cache west modules
        uses: actions/cache@v4
        env:
          cache-name: cache-zephyr-modules
        with:
          path: |
            modules/
            tools/
            zephyr/
            bootloader/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('app/west.yml') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
        timeout-minutes: 2
        continue-on-error: true
      - name: Initialize workspace (west init)
        run: west init -l app
      - name: Update modules (west update)
        run: west update
      - name: Export Zephyr CMake package (west zephyr-export)
        run: west zephyr-export
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "14.x
